{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { types } from '../types/types';\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { finishLoading, startLoading } from './ui';\nimport { noteLogout } from './notes';\nexport const startLoginEmailPassword = (email, password) => {\n  return dispatch => {\n    dispatch(startLoading());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n      dispatch(finishLoading());\n    }).catch(e => {\n      console.log(e);\n      dispatch(finishLoading());\n      Swal.fire('Error: ', e.message, 'error');\n    });\n  };\n};\nexport const starRegisterWithEmailPasswordName = (email, password, name) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      dispatch(login(user.uid, user.displayName));\n    }).catch(error => {\n      Swal.fire('Error: ', error.message, 'error');\n      console.log(error);\n    });\n  };\n};\nexport const starGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n    });\n  };\n};\nexport const login = (uid, displayName) => ({\n  type: types.login,\n  payload: {\n    uid,\n    displayName\n  }\n});\nexport const startLogout = () => {\n  return async dispatch => {\n    await firebase.auth().signOut();\n    dispatch(logout());\n    dispatch(noteLogout());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["/home/ielizondo/Documents/git/Journal-app/src/acction/auth.js"],"names":["Swal","types","firebase","googleAuthProvider","finishLoading","startLoading","noteLogout","startLoginEmailPassword","email","password","dispatch","auth","signInWithEmailAndPassword","then","user","login","uid","displayName","catch","e","console","log","fire","message","starRegisterWithEmailPasswordName","name","createUserWithEmailAndPassword","updateProfile","error","starGoogleLogin","signInWithPopup","type","payload","startLogout","signOut","logout"],"mappings":"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","sourcesContent":["import Swal from 'sweetalert2';\n\nimport { types } from '../types/types';\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { finishLoading, startLoading } from './ui';\nimport { noteLogout } from './notes';\n\n\n\n\nexport const startLoginEmailPassword = (email, password) => {\n   \n    return (dispatch) => {\n        dispatch(startLoading());\n         firebase.auth().signInWithEmailAndPassword(email, password)\n            .then( ({ user }) => {\n                dispatch(login(user.uid, user.displayName));\n                dispatch(finishLoading());\n            })\n            .catch( e => {\n                console.log(e);\n                dispatch(finishLoading());\n                Swal.fire('Error: ', e.message, 'error');\n            })\n    }\n}\n\nexport const starRegisterWithEmailPasswordName = (email, password, name) => {\n    return (dispatch) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password)\n            .then( async({ user }) => {\n\n                await user.updateProfile({displayName: name})\n                dispatch(\n                    login( user.uid, user.displayName)\n                )\n            }).catch( error => {\n                Swal.fire('Error: ', error.message, 'error');\n                console.log(error);\n            })\n    }\n}\n\nexport const starGoogleLogin = () => {\n    return (dispatch) => {\n\n        firebase.auth().signInWithPopup(googleAuthProvider)\n            .then( ({ user }) => {\n                dispatch(\n                    login( user.uid, user.displayName)\n                )\n            });\n    }\n}\n\nexport const login = (uid, displayName) => ({\n    type: types.login,\n    payload: {\n        uid,\n        displayName\n    }\n});\n\n\nexport const startLogout = () => {\n    return async ( dispatch ) => {\n        await firebase.auth().signOut();\n\n        dispatch( logout() );\n        dispatch(noteLogout());\n    }\n}\n\nexport const logout = () => ({\n    type: types.logout\n})"]},"metadata":{},"sourceType":"module"}